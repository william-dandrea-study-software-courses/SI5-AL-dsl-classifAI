App::=
    <AppName> '= create_app()'

    ( <Step> )+

    <AppName>'.generate()'

AppName::= <Name>

Name::= String

Step::= <Preprocessing> | <Splitting> | <Transformation> | <Mining> | <Comparaison>

#####################################################
# Grammar part about how to build the Preprocessing #
#####################################################

Preprocessing::=
    <AppName>'.preprocessing.dataset_file''(''path=' String ')'
    ( <AppName>'.preprocessing.dataset.'Column )+


Column::= <BooleanColumn> | <QualitativeColumn> | <QuantitativeColumn>

BooleanColumn::=
    '# Replace parameters for true and false values if this does not fit for your case'
    'define_bool_col''(''name=' String ',' 'true_value=' 'yes' ',' 'false_value=' 'no' ',' 'is_label=' 'False' ',' ( 'Cleaning_method=' <CleaningMethod> )? ',' ( 'use_default_transormation=' Bool )? ')'

CleaningMethod::= <DeleteLineCleaningMethod> | <ReplaceLineCleaningMethod>

DeleteLineCleaningMethod::= 'DeleteLineCleaningMethod''('')'

ReplaceLineCleaningMethod::= 'ReplaceLineCleaningMethode''(''replace_by=''False'')'

QualitativeColumn::=
    <QualitativeNominal> | <QualitativeOrdinal>

QualitativeNominal::=
    'define_quali_nominal_col''(''name=' String ',' 'values=' List ',' ( 'Cleaning_method=' <CleaningMethod> )? ',' ( 'use_default_transormation=' Bool )? ')'

QualitativeOrdinal::=
    'define_quali_nominal_col''(''name=' String ',' 'values=' List ',' ( 'Cleaning_method=' <CleaningMethod> )? ',' ( 'use_default_transormation=' Bool )? ')'

QuantitativeColumn::=
    <QuantitativeDiscrete> | <QuantitativeContinuous>

QuantitativeDiscrete::=
    'define_quanti_discrete_col''(' 'name=' String ',' ( 'Cleaning_method=' <CleaningMethod> )? ',' ( 'use_default_transormation=' Bool )? ')'

QuantitativeContinuous::=
    'define_quanti_continuous_col''(''name=' String ',' ( 'Cleaning_method=' <CleaningMethod> )? ',' ( 'use_default_transormation=' Bool )? ')'

##################################################
# Grammar part about how to build the Splitting  #
##################################################

Splitting::=
    <AppName>'.splitting.dataset''(' String ')'
    <AppName>'.splitting.train_validation_test''(''train_percent=' Int ',' 'validation_percent=' Int ',' 'test_percent=' Int ')'

######################################################
# Grammar part about how to build the Transformation #
######################################################

Transformation::=
    <AppName>'.transformation.dataset''(''dataset=' <AppName>'.preprocessing.dataset ')'

##############################################
# Grammar part about how to build the Mining #
##############################################

Mining::=
    <AppName>'.mining.'<TrainComparisonMethod>
    <ClassifierName> '=' ( <AppName>'.mining.'<Classifier> )+

ClassifierName::= <Name>

TrainComparisonMethod::=
    'train_comparison_method''(' 'method=' <Method> ')

Method::= <Accuracy> | <LearnTime> | <MeanScore> | <Precision>

Accuracy::= 'ACCURACY'

LearnTime::= 'LEARN_TIME'

MeanScore::= 'MEAN_SCORE'

Precision::= 'PRECISION'

Classifier::=
    <DecisionTreeClassifier> | <RandomForestClassifier> | <MLPCClassifier> | <SVCClassifier> | <KNeighborClassifier>

DecisionTreeClassifier::=
    'decision_tree_classifier''('')' (HyperParameters)+

RandomForestClassifier::=
    'random_forest_classifier''('')' (HyperParameters)+

MLPCClassifier::=
    'mlpc_classifier''('')' (HyperParameters)+

SVCClassifier::=
    'svc_classifier''('')' (HyperParameters)+

KNeighborClassifier::=
    'k_neighbor_classifier''('')' (HyperParameters)+

HyperParameters::=  <Splitter> | <Criterion> | <MinSampleSplit> | <NEstimators> | <Solver> | <Activation> | <CValues> | <NNeighbors>

Splitter::=
    '.splitters''(' '[' ( <Best> | <Random> ) ( ','<Best> | ','<Random> )* ']' ')'

Criterion::=
    '.criterion''(' '[' ( <Gini> | <Entropy> | <LogLoss> ) ( ','<Gini> | ','<Entropy> | ',' <LogLoss> )* ']' ')'

MinSampleSplit::=
    '.min_sample_split''(' '[' Int ( ',' Int )* ']' ')'

NEstimators::=
    '.n_estimators''(' '[' Int ( ',' Int )* ']' ')'

Solver::=
    '.solver''(' '[' ( <Lbfgs> | <Sgd> | <Adam> ) ( ','<Lbfgs> | ','<Sgd> | ','<Adam> )* ']'')'

Activation::=
    '.activation''(' '[' ( <Identity> | <Logistic> | <Tanh> | <Relu> ) ( ','<Identity> | ','<Logistic> | ','<Tanh> | ','<Relu> ) ']' ')'

CValues::=
    '.C''(''[' Int ( ',' Int )* ']' ')'

Neighbors::=
    '.n_neighbors''(' '[' Int ( ',' Int )* ']' ')'

Best::= 'BEST'

Random::= 'RANDOM'

Gini::= 'GINI'

Entropy::= 'ENTROPY'

LogLoss::= 'LOGLOSS'

Lbfgs::= 'LBFGS'

Sgd::= 'SGD'

Adam::= 'ADAM'

Identity::= 'IDENTITY'

Logistic::= 'LOGISTIC'

Tanh::= 'TANH'

Relu::= 'RELU'

###################################################
# Grammar part about how to build the Comparaison #
###################################################

Comparaison::=
   ( <AppName>'.comparaison.'<Chart> )+

Chart::=
    <CombinaisonChart> | <ScoreChart>

CombinaisonChart::=
    'add_combinaison_chart''(''classifier=' <ClassifierName> ')'

ScoreChart::=
    'score_chart''(''scores=' <Scores> ',' 'classifiers=' <Classifiers> ')'

Scores::= '[' <Score> ( ',' <Score>)+ ']'

Classifiers::= '[' <ClassifierName> ( ',' <ClassifierName>)+ ']'

Score::= <Accuracy> | <F1> | <Precision> | <Recall> | <Auc>

F1::= 'F1'

Recall::= 'RECALL'

Auc::= 'AUC'
